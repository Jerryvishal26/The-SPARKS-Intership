# -*- coding: utf-8 -*-
"""Task1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14eLntmNT1baoGvb3sVipRaWc35oBBseq

# The SPARKS Foundation Internship
Author: Jerry Vishal
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np  
import matplotlib.pyplot as plt  
# %matplotlib inline

url = "https://raw.githubusercontent.com/AdiPersonalWorks/Random/master/student_scores%20-%20student_scores.csv"
s_data = pd.read_csv(url)
print("Data imported successfully")

s_data.plot(x='Hours', y='Scores', style='+')  
plt.title('Hours vs Percentage')                    #Naming on Graph
plt.xlabel('Hours Studied')  
plt.ylabel('Percentage Score')  
plt.show()

X = s_data.iloc[:,: -1].values  #iloc is used to import range from tables or data
y = s_data.iloc[:, 1].values  
print(s_data.iloc[:,:-1])
print("Scores")
print(s_data.iloc[:, 1])

from sklearn.model_selection import train_test_split  #splits arrays or matrices into random subsets for train and test data, respectively.
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

from sklearn.linear_model import LinearRegression  
regressor = LinearRegression()  
regressor.fit(X_train, y_train) 

print("Training completed Succesfully")

line = regressor.coef_*X+regressor.intercept_    #coef_ attribute is also used to view the model's coefficients
                                                 #The intercept_ is the point where the function crosses the y-axis

plt.scatter(X, y)
plt.plot(X, line);
plt.show()

print(X_test) # Testing data - In Hours
y_pred = regressor.predict(X_test)

df = pd.DataFrame({'Actual':[i[0] for i in X_test], 'Predicted':[k for k in y_pred]})  
 
print(df)

z = [9.25]
own_pred = regressor.predict([z])

print("No of Hours = {}".format(z))
print("Predicted Score = {}".format(own_pred[0]))

from sklearn import metrics  
print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))

